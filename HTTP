HTTP 笔记:
    IP 协议依赖与 MAC地址:
        1. 当数据在中转时，会利用下一站中转设备的MAC地址搜索下一个目标地址，此时就用到了arp协议。
        ARP协议是一种解析地址的协议，根据通信方的IP地址
    HTTP 协议的职责:
        1. 请求: 生成针对目标服务器的请求报文.
        2. 响应: 对web 服务器的请求内容进行处理。
    TCP 协议职责:
        1. 请求: 将HTTP请求报文分割成报文段，按序列号分为多个报文段，把每个报文段传输给对方。
        2. 响应: 从对方那里接受报文段，按序列号重组报文段。
    IP 协议职责:
        1. 搜索对方地址，一边中转，一边传输。



HTTP 权威指南:

    1. Http URI 与 资源:
        1). 协议, 2) 主机与端口号 3) 路径 4) 用户名/密码 5) 参数
        6)
    2. Http 报文:
        1. 报文流是如何流动的?
            从发送方流向接受方。
        2. HTTP 报文的组成部分?
            1) 请求方法 2) 请求资源 3) 协议版本 4) 首部 5) 状态码 6) 原因 7) 实体。
        3. 请求和响应报文的区别?

        4. 状态码?

        5. HTTP 首部是用来做什么的?

    3. Http 连接管理:
        1. HTTP 是如何使用 TCP 连接的？

        2. TCP 连接时延， 瓶颈以及存在的问题?

        3. http 优化-持久连接，管道连接?

        4. 管理连接时应该以及不应该做的事?

        5. TCP 首部 及 IP 首部:
            IP首部: 源及目的IP地址，长度 和其他标记。
            TCP首部: 端口号，TCP控制标示， 以及用于数据完整性和排序的一些数值。
        6. TCP 性能:
            1. HTTP 事务延迟:
                处理事务的试验相对较短，除非服务器的资源出现负载。
            2. TCP 时延:
                1) TCP建立握手时延:
                    http 在任意发送数据之前，会先建立连接。在握手连接的建立中，建立TCP连接花费的时间占大部分。

                2) TCP 慢启动拥塞控制:
                    TCP 的传输性能还取决于TCP 连接的使用期。
                    TCP 连接会随着数据传输进行自我调整，起初会限制连接的传输速度，如果传输成功会随着时间的推移提高传输速度。
                    这就是TCP 慢启动，用于防止互联网的过载与阻塞。
                    TCP 慢启动限制了 TCP 端点任意时刻发送的分组数。每成功发送一个分组就会获得两个分组的发送权限。等到两个分组被确认后
                    就能发送四个分组，以此类推。
                3) 数据聚集 nagle算法:
                    为了防止发送大量的小分组导致互联网阻塞， nagle算法鼓励用全尺寸来发送分组(LAN 是1500字节，因特网几百字节)，提高网络利用率。
                    只有当其他分组被确认后，nagle算法才允许发送非全尺寸分组。当分组未备确认，其他数据会先被缓存起来，或者缓存积累达到全尺寸数据时，
                    才会发送缓存数据。
                    性能问题:
                        1. 小的分组会因永远不会到来的数据产生时延。
                        2. 在确认分组确认前，nagle算法会阻止分组发送，而分组确认会被延时确认算法阻塞100～200ms
                4) 捎带确认的 TCP延时确认算法:
                    因特网无法保证可靠的分组传输，在因特网路由繁忙时会肆意丢弃分组。
                    TCP 有自己的可靠确认机制，每个TCP 段都有序列号和数据完整性校验和。当接受者受到后会向发送者发送确认分组，如果
                    发送者在规定的时间内没有受到确认分组，则认定分组被破坏，并重新发送。
                    由于确认分组较小，TCP规定允许发送相同方向的分组对其进行捎带。有效利用网络资源，为了增加确认报文找到同向报文的可能性，
                    TCP 实现了一种‘延时确认’算法。
                    延时确认算法: 就是在规定时间内找相同传输方向的数据分组，如果没找到则单独一个分组。
                    又因服务器不会主动发出请求，所以导致延时算法会引入延时。
                5) TIME_WAIT时延和端口耗尽:
                    当某个TCP 连接关闭时， 会在内存中维护一个数据块。用来记录最近关闭连接的IP地址和端口号。这类信息只会存在一小段时间。(
                    最大分段使用期,约两分钟)，确保在这段时间内不会出现相同的连接和端口号。
            3. HTTP 连接优化:

                1. 并行连接:
                    由以前的串行HTTP事务，改成并行的HTTP事务会一定程度上提高加载速度。
                    问题:
                        1.当网络带宽有限制的时候，并行的HTTP事务就会同时去竞争带宽资源，这样带来的性能提升就很小。而且同时打开大量的
                        连接对服务器的性能会用严重的影响。
                        2.浏览器确实使用了并行连接，但是会限制并行数。
                        3.每条连接的建立会耗费时间和带宽。
                        4.由于TCP慢启动特性的存在，导致每条连接的传输性能不高。
                    结论: 虽然并行连接带来的性能提升有限，但是用户看到页面上所有组件都在加载，会感觉性能得到提升了。
                2. 持久连接:
                    优点: 持久连接降低了时延和建立连接的开销，并将连接保持在了调谐状态，减少了打开连接的数量。
                    缺点: 会出现大量空闲连接，耗费本地，远程客户端和服务器的资源。
                    HTTP1.0 keep-alive 连接:
                        keep-alive 只是将连接保持在活跃状态。发出keep-alive请求后，客户端和服务器不一定同意建立持久连接。
                        它们可以随时关闭空闲的持久连接，并限制持久连接可处理HTTP事务的数量。
                        可用 Keep-Alive 首部来指定参数信息，而且只用在指定了 Connection: keep-alive时，Keep-Alive首部才起
                        作用。
                    keep-alive 连接与限制:
                        1. keep-alive 必须随请求报文一起发送出去，才可能建立持久连接。
                        2. 如果响应首部中没有 keep-alive, 就知道服务器不允许建立 持久连接。
                        3. 只有在无需检测连接是否关闭就能知道实体长度的情况下才能保持持久连接，也就是说在实体首部中必须包含connect-length,
                        如果传输错误的connect-length, 服务端就不能检测出一条报文的结束和另一条报文的开始了。
                        4. 代理和网关必须执行 connection首部规则。代理或网关再将报文转发出去前必须删掉connection首部及 在connection首部
                        命名中的所有首部。



